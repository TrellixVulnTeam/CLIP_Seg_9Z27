tensor([  0,  12, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  12,  15, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  17, 255])
element_to_mask 17
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  17, 255])
element_to_mask 17
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   3, 255])
element_to_mask 3
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   3, 255])
element_to_mask 3
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   7,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   9,  15,  16, 255])
element_to_mask 16
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   1, 255])
element_to_mask 1
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   8, 255])
element_to_mask 8
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  17, 255])
element_to_mask 17
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  12,  15, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  12, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   6, 255])
element_to_mask 6
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  14,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  14,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   4,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   8, 255])
element_to_mask 8
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   9,  11,  16, 255])
element_to_mask 9
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   8, 255])
element_to_mask 8
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  19, 255])
element_to_mask 19
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  17, 255])
element_to_mask 17
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  13,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   5,  11,  15, 255])
element_to_mask 15
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  13, 255])
element_to_mask 13
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   8, 255])
element_to_mask 8
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   3, 255])
element_to_mask 3
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  19, 255])
element_to_mask 19
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   5, 255])
element_to_mask 5
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  12, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  10, 255])
element_to_mask 10
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   3, 255])
element_to_mask 3
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  19, 255])
element_to_mask 19
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   5,  15, 255])
element_to_mask 5
true_masks_size torch.Size([300, 300])
tensor([0, 1])
INFO: Starting training:
        Epochs:          5
        Batch size:      1
        Learning rate:   1e-05
        Training size:   1464
        Validation size: 1449
        Checkpoints:     True
        Device:          cuda
        Images scaling:  0.5
        Mixed Precision: True
Epoch 1/5:   0%|                                                                    | 0/1464 [00:00<?, ?img/s]/home/dvir_proj_1/anaconda3/lib/python3.7/site-packages/torchvision/transforms/functional.py:127: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.as_tensor(np.asarray(pic))
/home/dvir_proj_1/anaconda3/lib/python3.7/site-packages/torchvision/transforms/functional.py:127: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.as_tensor(np.asarray(pic))
/home/dvir_proj_1/anaconda3/lib/python3.7/site-packages/torchvision/transforms/functional.py:127: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.as_tensor(np.asarray(pic))
/home/dvir_proj_1/anaconda3/lib/python3.7/site-packages/torchvision/transforms/functional.py:127: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /pytorch/torch/csrc/utils/tensor_numpy.cpp:141.)
  img = torch.as_tensor(np.asarray(pic))
Epoch 1/5:   3%|â–ˆ                                       | 40/1464 [00:01<01:05, 21.63img/s, loss (batch)=1.23]
INFO: Saved interrupt
tensor([  0,   9, 255])
element_to_mask 9
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   8, 255])
element_to_mask 8
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   7, 255])
element_to_mask 7
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  12, 255])
element_to_mask 12
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   5, 255])
element_to_mask 5
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,  13, 255])
element_to_mask 13
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   3, 255])
element_to_mask 3
true_masks_size torch.Size([300, 300])
tensor([0, 1])
tensor([  0,   7, 255])
element_to_mask 7
true_masks_size torch.Size([300, 300])